#+STARTUP: showall
#+TITLE: My Big Book of Everything
#+PROPERTY: header-args:C++ :main no :results output :flags -std=c++17 -Wall -pedantic -Werror


This is a collection of algorithms and data structures that I've collected and found useful at some point.
Some of these have sources, if I remember where they came from, I'll try to cite it.
It is time to take it from being mere scribbles in a 3-ring binder and breath some digital life into it.
Hopefully this will be as useful to others as it has been to me.

While the content is coming from a 3-ring binder, the content is in no particular order. I'll try to re-organize it in a way that makes sense, but there are no guarantees.



* Data Structures
** Graph

*** Adjacency List

This is probably my favourite graph implementation base. It's fairly straight-forward, using a map to map between a node and the adjacent nodes. This is a directed graph, but could be changed very easily by modifying the ~add~ method to include ~_edges.insert({to, {{from}, {from}}})~ as well. This graph is very dynamic, it is very easy to grow and quite versatile for any type of graph.

#+NAME: Adjacency List Graph
#+BEGIN_SRC C++ :results output :exports both
#include <iostream>
#include <map>
#include <set>
#include <vector>

template<typename Node_Type>
class Graph {
public:
	Graph () {}

	/**
		 Add edge between from and to nodes

		 from: starting nodes
		 to:   ending node
	,*/
	void add(Node_Type const & from, Node_Type const & to) {
	if (_edges.count(from) == 0) _edges.insert({from, {{to}, {to}}});
	else if (std::get<1>(_edges.at(from)).count(to) == 0) {
		std::get<0>(_edges.at(from)).push_back(to);
		std::get<1>(_edges.at(from)).insert(to);
	}
	// Add the to node as well
	if (_edges.count(to) == 0) _edges.insert({to, {{},{}}});
}

/**
	 Add node to graph, but is not adjacent to anyone
,*/
void add(Node_Type const & node) {
	if (_edges.count(node) == 0) _edges.insert({node, {{},{}}});
}

/**
	 Get adjacent nodes to a given node

	 node: Node to find adjacent nodes to
,*/
std::vector<Node_Type> const & getAdjacent(Node_Type const & node) const {
	return std::get<0>(_edges.at(node));
}

/**
	 Check if the graph contains a given node
,*/
inline bool contains(Node_Type const & node) const { return _edges.count(node) != 0; }

/**
	 Number of nodes in the graph
,*/
inline size_t nodes() const { return _edges.size(); }

private:

	// Vector provides order, set provides uniqueness
	// If one of the properties is not required, remove the corresponding type
	std::map<Node_Type, std::pair<std::vector<Node_Type>,  std::set<Node_Type>>> _edges;
};

std::ostream & operator<<(std::ostream & os, std::vector<int> v) {
	os << "[ ";
	for( auto el: v) os << el << ' ';
	os << ']';
}

int main(int argc, char** argv) {
	Graph<int> G;

	for (int i {0}; i <= 20; i++) {
		G.add(1, i);
		if (i % 2 == 0) G.add(2, i);
		if (i % 3 == 0) G.add(3, i);
	}

	G.add(1, 20); // No effect!

	std::cout << "Multiples of 1: " << G.getAdjacent(1) << std::endl;
	std::cout << "Multiples of 2: " << G.getAdjacent(2) << std::endl;
	std::cout << "Multiples of 3: " << G.getAdjacent(3) << std::endl;
}
#+END_SRC

#+RESULTS: Adjacency List Graph
: Multiples of 1: [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]
: Multiples of 2: [ 0 2 4 6 8 10 12 14 16 18 20 ]
: Multiples of 3: [ 0 3 6 9 12 15 18 ]

*** Adjacency Matrix

This is a bit more memory-expensive than the adjacency list, which is usually computationally cheap enough that the adjacency list graph really should be used. I haven't profiled it or anything, but the adjacency matrix _might_ be faster for accesses. It is cheaper to navigate both directions through the graph though, simply selecting either the correct row or column.

This implementation is not a di-graph.

 #+NAME: Adjacency Matrix Graph
 #+BEGIN_SRC C++ :results output :exports both
  #include <iostream>
  #include <vector>

  template<typename Value_Type>
  class Graph {
  public:
    /**
       Construct a new graph with N nodes
    ,*/
    Graph (size_t N): _matrix(std::vector<std::vector<Value_Type>>(N, std::vector<Value_Type>(N, {}))) {}

    /**
       Set the weight of an edge between two nodes
    ,*/
    void add(size_t from, size_t to, Value_Type w) {
      _matrix.at(from).at(to) = w;
      _matrix.at(to).at(from) = w;
    }

    /**
       Get adjacent nodes (nodes with a non {} Value_Type on the edge)
    ,*/
    std::vector<size_t> getAdjacent(size_t node) {
      std::vector<size_t> vec;
      for (size_t i {0}; i < _matrix.at(node).size(); i++) {
        if (_matrix.at(node).at(i) != Value_Type {}) vec.push_back(i);
      }
      return vec;
    }

   Value_Type const & at(size_t from, size_t to) const { return _matrix.at(from).at(to); }
   bool connected(size_t from, size_t to) const { return _matrix.at(from).at(to) != Value_Type {}; }
	 size_t nodes() const { return _matrix.size(); }

  private:
    std::vector<std::vector<Value_Type>> _matrix;
  };

 int main() {
   Graph<int> G(10);
   G.add(0, 1, 1);
   G.add(0, 2, 2);
   G.add(1, 2, 32);
   std::cout << "Cost from 1 to 2 " << G.at(1, 2) << std::endl;
   std::cout << "2 and 3 connected: " << std::boolalpha << G.connected(2, 3) << std::endl;
   std::cout << "0 and 1 connected: " << std::boolalpha << G.connected(0, 1) << std::endl;
 }
 #+END_SRC

 #+RESULTS: Adjacency Matrix Graph
 : Cost from 1 to 2 32
 : 2 and 3 connected: false
 : 0 and 1 connected: true

** Fenwick Trees

The Fenwick tree makes computing range sums fast (~O(log n)~).
Updating them is pretty fast too.

#+BEGIN_SRC C++ :results output :exports both
#include <iostream>
#include <vector>
template<typename T, typename VT = typename T::value_type>
class FenwickTree {
 public:
	FenwickTree(T elements) {
		// O(n log n), could be O(n) though
		_tree.resize(elements.size() + 1);
		for (size_t i {0}; i < elements.size(); ++i)
			add(i + 1, elements.at(i));
	}

	void add(size_t p, VT value) {
		if (p == 0) throw std::out_of_range("Position cannot be 0");
		if (p > _tree.size() - 1) _tree.resize(_tree.size() + p - _tree.size() + 1, 0);
		while (p < _tree.size()) {
			_tree[p] += value;
			p += p & -p;
		}
	}

	size_t size() const { return _tree.size(); }

	VT sum(size_t i) {
		VT s(0);
		while (i > 0) {
			s += _tree.at(i);
			i -= i & -i;
		}
		return s;
	}

	template<typename Type>
	friend std::ostream & operator<<(std::ostream & os, FenwickTree<Type> const & ft);
private:
	std::vector<VT> _tree;
};

template<typename T>
std::ostream & operator<<(std::ostream & os, FenwickTree<T> const & ft) {
	for (auto el: ft._tree) os << el << ' ';
	return os;
}

std::ostream & operator<<(std::ostream & os, std::vector<int> const & nums) {
	for (auto el: nums) os << el << ' ';
	return os;
}

int main() {
	std::vector<int> v {1, 2, 3, 4};
	FenwickTree<std::vector<int>> f (v);
	std::cout << "Numbers: " << v << std::endl;
	std::cout << "Tree contents: " << f << std::endl;
	std::cout << "Sum of the first two numbers: " << f.sum(2) << std::endl;

	// Fenwick Trees are 1-indexed
	f.add(1, 2); // Add 2 to the first number
	std::cout << "Updated Numbers: " << std::vector<int> {3, 2, 3, 4} << std::endl;
	std::cout << "Updated Tree: " << f << std::endl;
	std::cout << "Sum of the first two numbers: " << f.sum(2) << std::endl;
	std::cout << "Sum of the first three numbers: " << f.sum(3) << std::endl;
}
#+END_SRC

#+RESULTS:
: Numbers: 1 2 3 4
: Tree contents: 0 1 3 3 10
: Sum of the first two numbers: 3
: Updated Numbers: 3 2 3 4
: Updated Tree: 0 3 5 3 12
: Sum of the first two numbers: 5
: Sum of the first three numbers: 8
